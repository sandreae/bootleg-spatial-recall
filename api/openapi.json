{
  "openapi": "3.0.0",
  "info": {
    "title": "Bootleg Spatial Recall API",
    "version": "1.0.0",
    "description": "API endpoints for bootleg-spatial-audio, bootleg convolution reverb."
  },
  "paths": {
    "/api/auth/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Post an user.",
        "description": "API endpoint to create a new User.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "myemail@address.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "badpassword123"
                  },
                  "passwordConfirm": {
                    "type": "string",
                    "example": "badpassword123"
                  }
                },
                "required": [
                  "email",
                  "password",
                  "passwordConfirm"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/User"
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login.",
        "description": "API endpoint login with your username and password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "myemail@address.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "badpassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "jwt": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "email": {
                              "type": "string",
                              "example": "myemail@address.com"
                            },
                            "id": {
                              "type": "string",
                              "example": "60350154a0e30c25cddab650"
                            }
                          },
                          "required": [
                            "email",
                            "id"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users.",
        "description": "API endpoint that returns all existuing users from the database.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Users"
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get one user by ID.",
        "description": "API endpoint for getting an existing user by their id.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/User"
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "ID of user to use",
            "style": "simple"
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user.",
        "description": "API endpoint to update an existing user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "example": "myemail@address.com"
                      },
                      "id": {
                        "type": "string",
                        "example": "60350154a0e30c25cddab650"
                      }
                    },
                    "required": [
                      "email",
                      "id"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/User"
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "ID of user to update",
            "style": "simple"
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete one User by ID.",
        "description": "API endpoint for deleting an user by their ID.",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Error"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "ID of User to delete",
            "style": "simple"
          }
        ]
      }
    },
    "/api/impulses": {
      "get": {
        "tags": [
          "Impulses"
        ],
        "summary": "Get all impulses.",
        "description": "API endpoint that returns all stored impulses from the database.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Impulses"
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "Impulses"
        ],
        "summary": "Post an impulse.",
        "description": "API endpoint to upload new impulses.",
        "requestBody": {
          "$ref": "#/components/requestBodies/Impulse"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Impulse"
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/api/impulses/{id}": {
      "get": {
        "tags": [
          "Impulses"
        ],
        "summary": "Get or modify one impulse by ID.",
        "description": "API endpoint for getting or modifying an imulse by it's id.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Impulse"
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of impulse to use",
            "example": "6035008a676ffc23ca7e408",
            "style": "simple"
          }
        ]
      },
      "patch": {
        "tags": [
          "Impulses"
        ],
        "summary": "Update an impulse.",
        "description": "API endpoint to update an existing impulse.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "M60 underpass"
                  },
                  "location": {
                    "type": "string",
                    "example": "Manchester"
                  },
                  "gpsLat": {
                    "type": "number",
                    "example": 53.435212
                  },
                  "gpsLon": {
                    "type": "number",
                    "example": -2.316901
                  },
                  "description": {
                    "type": "string",
                    "example": "Long reverb in M60 underpass."
                  },
                  "date": {
                    "type": "string",
                    "example": "2005-06-07T00:00:00.000Z"
                  }
                },
                "required": [
                  "name",
                  "location",
                  "description",
                  "date"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Impulse"
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of impulse to use",
            "example": "6035008a676ffc23ca7e408",
            "style": "simple"
          }
        ]
      },
      "delete": {
        "tags": [
          "Impulses"
        ],
        "summary": "Delete one impulse by ID.",
        "description": "API endpoint for deleting an imulse by it's id.",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of impulse to use",
            "example": "6035008a676ffc23ca7e408",
            "style": "simple"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Impulse": {
        "title": "impulse",
        "required": [
          "name",
          "date",
          "location",
          "description",
          "audioFile",
          "imageFile"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "location": {
            "type": "string"
          },
          "gpsLocation": {
            "type": "object",
            "properties": {}
          },
          "description": {
            "type": "string"
          },
          "audioFile": {
            "type": "string"
          },
          "imageFile": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "_id": "60350154a0e30c25cddab650",
          "name": "M60 underpass",
          "location": "Manchester",
          "gpsLocation": {
            "latitidue": 53.435212,
            "longitude": -2.316901
          },
          "description": "Long reverb in M60 underpass.",
          "date": "2005-06-07T00:00:00.000Z",
          "imageFile": "https://bootleg-spatial-recall.fra1.digitaloceanspaces.com/1614086483666-impulse-new-impulse-10.jpeg",
          "audioFile": "https://bootleg-spatial-recall.fra1.digitaloceanspaces.com/1614086483666-impulse-new-impulse-10.wav",
          "createdAt": "2021-02-23T13:21:24.816Z",
          "updatedAt": "2021-02-23T13:21:24.816Z",
          "slug": "m60-underpass"
        }
      },
      "User": {
        "title": "User",
        "required": [
          "email",
          "password",
          "passwordConfirm"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "passwordConfirm": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "_id": {
            "type": "string"
          }
        },
        "example": {
          "_id": "60350154a0e30c25cddab650",
          "email": "myemail@address.com"
        }
      }
    },
    "responses": {
      "Impulses": {
        "description": "Succesfully respond with an array of all impulses.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "Success"
                },
                "results": {
                  "type": "integer",
                  "example": 1
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "impulses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Impulse"
                      }
                    }
                  }
                }
              },
              "required": [
                "status",
                "data",
                "results"
              ]
            }
          }
        }
      },
      "Impulse": {
        "description": "Succesfully respond with one impulses.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "Success"
                },
                "results": {
                  "type": "integer",
                  "example": 1
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "impulse": {
                      "$ref": "#/components/schemas/Impulse"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Users": {
        "description": "Succesfully respond with an array of all users.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "Success"
                },
                "results": {
                  "type": "integer",
                  "example": 1
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "impulses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string",
                            "example": "myemail@address.com"
                          },
                          "id": {
                            "type": "string",
                            "example": "60350154a0e30c25cddab650"
                          }
                        },
                        "required": [
                          "email",
                          "id"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "User": {
        "description": "Succesfully respond with one user.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "Success"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "example": "myemail@address.com"
                        },
                        "id": {
                          "type": "string",
                          "example": "60350154a0e30c25cddab650"
                        }
                      },
                      "required": [
                        "email",
                        "id"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Error": {
        "description": "Default error",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "statusCode": {
                          "type": "integer",
                          "example": "404"
                        },
                        "status": {
                          "type": "string",
                          "example": "failure."
                        },
                        "isOperational": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found."
                    },
                    "stack": {
                      "type": "string",
                      "example": "Really long message."
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "failure."
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found."
                    }
                  },
                  "required": [
                    "status",
                    "message"
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "requestBodies": {
      "Impulse": {
        "description": "Add an Impulse to the database",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "M60 underpass"
                },
                "location": {
                  "type": "string",
                  "example": "Manchester"
                },
                "gpsLat": {
                  "type": "number",
                  "example": 53.435212
                },
                "gpsLon": {
                  "type": "number",
                  "example": -2.316901
                },
                "description": {
                  "type": "string",
                  "example": "Long reverb in M60 underpass."
                },
                "date": {
                  "type": "string",
                  "example": "2005-06-07T00:00:00.000Z"
                },
                "imageFile": {
                  "type": "string",
                  "format": "binary"
                },
                "audioFile": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "required": [
                "name",
                "location",
                "description",
                "date",
                "imageFile",
                "audioFile"
              ]
            }
          }
        }
      }
    }
  }
}